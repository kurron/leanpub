## As an Architect I want to be able to coordinate my micro-services

> *Dear JVM Guy, I've recently been given the responsibility of guiding
> our software team down the micro-services path.  This is our first
> attempt at using lots of coordinated services and I realize that one
> the issues we have to address is how the services know about each other.
> We drew some point-to-point connections on the whiteboard thinking that
> we could hand configure resources and realized that managing such a setup 
> is intractable, especially if you add in the idea that services continually come 
> and go.  Do you have any recommendations for a Spring shop like ours?*
>
> Lost in London

**The JVM Guy Recommends: [Spring Cloud](http://projects.spring.io/spring-cloud/)**

Dear Lost, welcome to the club.  Many of us are still trying to figure what best practices
are in the micro-services world but I can point you to a tool that looks very promising: Spring Cloud.
It is an umbrella project that houses many components, one of which is responsible for 
service discovery.  The Spring Cloud Netflix project provides a nice abstraction above existing
discovery technologies, including Netflix's Eureka and Hashicorp's Consul.  If you are a Spring
Boot user you will find it very easy to register your application as well as discover what other
applications are currently available. Let's look a simple example.

{title="Example Service Registration and Discovery", lang="Groovy"} 
~~~~~~~~ 
@SpringBootApplication
@EnableDiscoveryClient
class Application {

    static void main( String[] args ) {
        SpringApplication.run( Application, args )
    }
}
~~~~~~~~ 

The above code automatically registers your software with service discovery as well as
enabling service lookups.  Seriously, that is all there is to it.  There are, however,
a couple of configuration files to put in place, but the steps are very simple.

{title="src/main/resources/config/bootstrap.yml", lang="YML} 
~~~~~~~~ 
spring:
    application:
        name: my-cool-service
~~~~~~~~ 

The `bootstrap.yml` is the first configuration file that Spring Cloud looks for during the startup
process and contains the service identifier we want to register our application as.  Other processes
using the discovery service will locate your coordinates using the name `my-cool-service`.

{title="src/main/resources/config/application.yml", lang="YML} 
~~~~~~~~ 
spring:
    cloud:
        config:
            discovery:
                enabled: true

eureka:
    client:
        serviceUrl:
            defaultZone: http://localhost:8761/eureka/
    instance:
        preferIpAddress: true
~~~~~~~~ 

The `application.yml` is your typical Spring Boot configuration file and is examined after `bootstrap.yml`.
It is here that we specify the location to the discovery service.  In this configuration we are running
in what is known as `Eureka First Bootstap` mode, which means that we want to contact the discovery server first
and use it to locate all other services, including the configuration server.  This allows you to move the
configuration server around on your network without having to reconfigure clients by hand.  Obviously,
if you the change the coordinates of the discovery server, all the application files will have to be adjusted.

T> ## Using Machines Not Registered in DNS
T>
T> Projects I've worked on use VMs that are not in DNS which means that you cannot
T> connect to them via a hostname.  By default, Spring Cloud will register your service
T> using coordinates based on the hostname.  You can, as we have done in the above example,
T> tell Spring Cloud via the `eureka.instance.preferIpAddress` property that you want to 
T> register using the ip address instead.  If you see your service getting registered by
T> the loopback address (127.0.01), take a look at the `/etc/hosts` file on the box running
T> your service.   My guess is that it isn't configured properly. That one has bitten me once
T> or twice.

Setting up the client is pretty simple.  Standing up the server is a bit more involved, but not by much.

{title="Standalone Discovery Service", lang="Groovy"} 
~~~~~~~~ 
@SpringBootApplication
@EnableEurekaServer
class Application {

    static void main( String[] args ) {
        new SpringApplicationBuilder( Application ).web( true ).run( args )
    }
}
~~~~~~~~ 

You'll notice that the only difference between the client and server are the annotations.  The client
uses `@EnableDiscoveryClient` while the server uses `@EnableEurekaServer`.  The configuration files 
are very different, however.

{title="src/main/resources/config/bootstrap.yml", lang="YML} 
~~~~~~~~ 
spring:
    application:
        name: my-discovery-service
    cloud:
        config:
            enabled: false
            failFast: true
~~~~~~~~ 

In the bootstrap file, we are telling the service not to attempt to load its configuration from the
configuration service.

{title="src/main/resources/config/application.yml", lang="YML} 
~~~~~~~~ 
server:
    port: 8761

# set up the server in standalone mode -- do not require a peer server
eureka:
    instance:
        hostname: localhost
    client:
        registerWithEureka: false
        fetchRegistry: false
        serviceUrl:
          defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
    server:
        enableSelfPreservation: false
~~~~~~~~ 

In the above configuration, we are setting up the server in standalone mode.  Normally, you 
run multiple Eureka servers for availability reasons but if you just want to experiment with
Eureka, standalone mode is fine.

T> ## Do not try and use custom ports or contexts
T>
T> I've had very little luck in taking advantage of Spring Boot's ability to bind the
T> service to custom ports and contexts.  Although the server will stand up fine, I have
T> had issues with other parts of the Netflix stack integrating with Eureka when non-default
T> ports and contexts are in play.  I'd advise you to use the default port of `8761` and context of `/`
T> until you become comfortable with how the various pieces in the Netflix stack interact with 
T> each other.

Our final stop on this tour of service discovery will be how the clients lookup and use services.

I> ## [Consul](https://www.consul.io/)
I> The Consul project is built by the same folks that gave us Vagrant and Packer.  It is an interesting
I> alternative to Eureka that is currently being integrated into Spring Cloud.  Consul provides
I> DNS facilities allowing applications to find each other using standard hostname resolution techniques.
I> Consul also provides a key-value store allowing applications to store their configurations in it
I> as well.  At the time of this writing, Consul integration was still in beta but pay attention to it.

{title="Discovery Client", lang="Groovy"} 
~~~~~~~~ 
@SpringBootApplication
@EnableEurekaClient
class Application {

    static void main( String[] args ) {
        new SpringApplicationBuilder( Application ).web( true ).run( args )
    }
}
~~~~~~~~ 

{title="src/main/resources/config/bootstrap.yml", lang="YML} 
~~~~~~~~ 
spring:
    application:
        name: my-discovery-client
    cloud:
        config:
            enabled: false
            failFast: true
~~~~~~~~ 

{title="src/main/resources/config/application.yml", lang="YML} 
~~~~~~~~ 
eureka:
    client:
        serviceUrl:
            defaultZone: http://localhost:8761/eureka/
    instance:
        preferIpAddress: true
        metadataMap:
            zone: production
~~~~~~~~ 

As you can see, very similar to the server configuration with the primary difference is the use of the `@EnableEurekaClient`
annotation. The specification of a `zone` is interesting in that allows you to partition your registrations into
namespaces.  That way, a single discovery server can contain information for a variety of runtime contexts.
 Let's see some examples of using the discovery server to locate services.

{title="Discovery Client Example", lang=groovy}
~~~~~~~
@WebIntegrationTest( randomPort = true )
@ContextConfiguration( loader = SpringApplicationContextLoader, classes = Application )
class DiscoveryClientIntegrationTest extends Specification {

    @Autowired
    private LookupService discoveryClient

    def 'locate a service endpoint by name'() {

        given: 'a valid discovery client'
        assert discoveryClient

        when: 'I ask for an available service instance'
        def instance = discoveryClient.getNextServerFromEureka( 'my-cool-service', false )

        then: 'I get an object containing all the connection information'
        instance.hostName
        instance.IPaddr
        instance.port
    }
}
~~~~~~~

This mechansim is very simple and can be used to talk to services that use non-HTTP protocols because it gives
you access to the host and port of the desired service.  If you are collaborating with a REST client, then Spring 
provides a simpler form for you to use.

{title="REST Teamplate Example", lang=groovy}
~~~~~~~
@WebIntegrationTest( randomPort = true )
@ContextConfiguration( loader = SpringApplicationContextLoader, classes = Application )
class DiscoveryClientIntegrationTest extends Specification {

    @Autowired
    private RestOperations restTemplate

    def 'locate a service endpoint by name'() {

        given: 'a valid REST template'
        assert restTemplate

        when: 'I contact a service via a virtual host name'
        def results = restTemplate.getForObject( 'http://my-cool-service/some-endpoint', String )

        then: 'I get the expected results'
        results
    }
}
~~~~~~~

The above example isn't too different from standard REST template usage.  The only real difference is that we
are using a virtual hostname that matches whatever name the service used to register with the discovery 
server.  Under the covers, the template is using Netflix's Ribbon and Eureka libraries to do client-side 
service look up and load balancing.  The virtual hostname is transformed into a hostname and port automatically 
for you,  greatly simplifying your client's configuration. As instances of `my-cool-service` come and go, your
client will always route itself to the next available instance, providing greater fault tolerance to your
application.
