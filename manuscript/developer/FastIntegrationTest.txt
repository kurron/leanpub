## As a Developer I want speed up my integration tests and reduce false negatives

> *Dear JVM Guy, I strongly believe in automated testing but sometimes I get frustrated by my integration tests.
> Periodically the service I'm testing against gets a little weird causing my test to fail for no fault of its own.
> Even when the tests are successful they can take a long time to complete.  Some of the endpoints I test against are
> metered and have a dollar costs associated to them forcing us to restrict the amount of testing we can do.   I'm
> afraid that my team will begin to reject automated testing and we'll be back to where we were a few years ago --
> constantly putting fires out in production. Is there anything I can do to improve my situation and prevent a slide
> backwards?*
>
> *Worried Warren*

**The JVM Guy Recommends: Spring Beans, [Gateways](http://martinfowler.com/eaaCatalog/gateway.html), 
[Service Stubs](http://martinfowler.com/eaaCatalog/serviceStub.html)**

Dear Worried, I think I have just the answer: Service Stubs.  The idea is a simple one -- have a *single* integration test
that verifies the API contract between your system and an endpoint.  All other tests in your system use a test double
in place of the real integration point.  Even if the actual endpoint is down, the only test that is affected is the
contract test.  All other tests will continue to work.  In order to make this work, we need a couple of pieces in place.

The first is [proper layering](#darjeeling), which we have already discussed.  For this discussion, we'll continue to
use Martin Fowler's terms but focus on individual objects in the Gateway layer:

> *Gateway*
>
> "An object that encapsulates access to an external system or resource."
>

> *Service Stub*
>
> "Removes dependence upon problematic services during testing."
>

These patterns will allow us to conditionally replace slow and/or unstable endpoints during testing.  First, we need to
encapsulate all communication logic inside a single object -- the Gateway.  Typically, the Gateway will be responsible
for making any data transformations, such as serializing an internal model into a JSON structure, as well as the
managing networking APIs and protocols.  For this solution we will be using Groovy and Spring to manage our Gateway.

{title="TranslationGateway.groovy", lang="Groovy"} 
~~~~~~~~ 
interface TranslationGateway {
    String toFrench( String textToTranslate )
}
~~~~~~~~ 

As you can see, we have an extremely simple interface that will take a bit of text and return a French translation of
that text.  We will have two implementations of that service: one that talks to Google and one that returns fake
translations.

{title="GoogleTranslationAdapter.groovy", lang="Groovy"} 
~~~~~~~~ 
class GoogleTranslationGateway implements TranslationGateway {
    String toFrench( String textToTranslate ) {
        // whatever Google API calls we need to perform the translation
    }
}
~~~~~~~~ 

{title="GoogleTranslationServiceStub.groovy", lang="Groovy"} 
~~~~~~~~ 
class GoogleTranslationServiceStub implements TranslationGateway {
    String toFrench( String textToTranslate ) {
        'Bonjour'
    }
}
~~~~~~~~ 

The stubbed version is dumb and always returns `Bonjour` as its translation but typical stubs will have more
intelligence and react differently to a small set of expected input data.

{title="SomeCoreComponent.groovy", lang="Groovy"} 
~~~~~~~~ 
class SomeCoreComponent {

    private final TranslationGateway theGateway

    // having the gateway inject is an important part of this technique
    SomeCoreComponent( TranslationGateway aGateway ) {
        theGateway = aGateway
    }

    String doSomeWork() {
        // do some work that uses the translation gateway
        theGateway.toFrench( "foo" )
    }
}
~~~~~~~~ 

The next part of the recipe is to have Spring conditionally wire the proper adapter based on current Spring profile.

T>
T> In order for Spring to work correctly, we have to **only use the gateway interface in our system and never reference
T> any concrete implementations**.  Failure to follow this rule will, in essence, hard code the gateway that is used and
T> negate the expected test-time improvements.
T>

{title="ExampleSpringContext.groovy", lang="Groovy"} 
~~~~~~~~ 
class ExampleSpringContext {

    @Bean
     TranslationGateway googleTranslationGateway() {
        new GoogleTranslationGateway()
    }

    @Bean
    @Profile( { "integration-testing" } )
    @Primary
    TranslationGateway googleTranslationServiceStub() {
        new GoogleTranslationServiceStub()
    }

    @Bean
    SomeCoreComponent someCoreComponent( TranslationGateway gateway ) {
        new SomeCoreComponent( gateway )
    }
}
~~~~~~~~ 

The above context might look a little strange so let's break it down piece by piece.  The `@Bean` annotation tells
Spring to create three beans: one component and two gateways.  The `@Profile` annotation tells Spring to only create the
stub gateway when the Spring profile named `integration-testing` is active.  Any beans not annotated with `@Profile`
will always be created regardless of the specified profile.  Finally, the `@Primary` annotation tells Spring that if two
beans can fulfill a particular autowiring, use the annotated bean.  So, when running with the default profile only two
beans will be created: `googleTranslationGateway` and `someCoreComponent`.  Further, `someCoreComponent` will get
autowired with `googleTranslationGateway`. When the `integration-testing` profile is active, the
`googleTranslationServiceStub` also gets created.  In this case, Spring has two possible beans it could wire into the
`someCoreComponentBean` and will select `googleTranslationServiceStub` because of the `@Primary` annotation.  In
summary, when running in production Spring will wire in the Google gateway but when running during integration testing,
Spring will wire in the service stub.  This gives us a stable, controlled endpoint to use during our automated tests
allowing for faster and more predictable builds.

Before you can declare victory and move onto the next problem you **must write an integration test to exercise the real
endpoint**.  Failing to write this test will mean that the endpoint only gets exercised during production and only bad
things can come from that.

{title="Example Spock Integration Test", lang="Groovy"} 
~~~~~~~~ 
@ContextConfiguration( classes = Application, loader = SpringApplicationContextLoader )
class GoogleTranslationAdapterIntegrationTest extends BaseSpecification {

    @Autowired
    GoogleTranslationGateway sut

    def 'verify toFrench'() {

        given: 'subject under test'
        assert sut

        when: 'toFrench is called'
        def results = sut.toFrench( 'goodbye' )

        then: 'the proper translation is returned'
        'au revoir' == results
    }
}
~~~~~~~~ 

T> ## Make Your Own Annotation
T>
T> Spring has the notion of stereotypes which are annotations that indicate a particular role a bean plays in the
T> implementation.  The `@RestController` and `@Repository` annotations are examples of stereotypes.  Many people don't
T> know that you can create your own custom stereotypes.  Instead of always specifying the
T> `@Profile( { "integration-testing" } )` and `@Primary` annotations on your test doubles, you could save yourself some
T> typing and make your intentions clearer by creating your own `@ServiceStub` annotation.  Look at the `@RestController`
T> or `@Repository` source to see how simple it is to create your own stereotype.
T>
