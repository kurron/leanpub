## As a Developer I want to reduce the boilerplate code in my Spring projects

> *Dear JVM Guy, we're a Spring shop and we are slowing migrating to micro-service based solutions.  What I've noticed is that each project has a certain
> amount of 'plumbing' code that has to get written before any real logic gets put in place.  We've thought about creating our own set of libraries
> but we're afraid of having to maintain it as versions of the Spring libraries change over time.  Is there something you can recommend that allows our shop to
> focus on writing solution-specific code and avoid some of the infratructure code we know needs to exist?*
>
> *Interested in Ipswich*

**The JVM Guy Solution: [Spring Boot](http://projects.spring.io/spring-boot/)**

Dear Interested, I've written my fair share of Spring applications and ran into the exact situation you've decribed.  My solution took the form of Spring Boot.

> From the Spring website:
>
> "Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that can you can "just run". We take an opinionated view 
> of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring 
> configuration."

The Spring Boot documentation is well written so I won't focus on the **how** of Spring Boot.  Instead, I'll focus on the **what** and the **why**.
What you get from Spring Boot is the freedom to ignore parts of the infrastructure that do not require special attention or configuration.  For example,
if my application uses Spring Data MongoDB I can just add a few dependencies to my Gradle file and Spring will add all the necessary beans for me.

{title="Example Spring Boot Dependencies"} 
~~~~~~~~ 
compile "org.springframework.boot:spring-boot-starter-data-mongodb:1.2.0.RELEASE"
compile "org.springframework.boot:spring-boot-starter-web:1.2.0.RELEASE" 
compile "org.springframework.boot:spring-boot-starter-actuator:1.2.0.RELEASE"
~~~~~~~~ 
 
Those dependencies gets me the following beans:
 
{title="Output from curl http://localhost:8080/beans (filtered for readability)"} 
~~~~~~~~ 
[
  {
    "context": "application",
    "parent": null,
    "beans": [
      {
        "bean": "application",
      },
      {
        "bean": "PropertyPlaceholderAutoConfiguration",
      },
      {
        "bean": "BeanTypeRegistry",
      },
      {
        "bean": "propertySourcesPlaceholderConfigurer",
      },
      {
        "bean": "EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat",
      },
      {
        "bean": "tomcatEmbeddedServletContainerFactory",
      },
      {
        "bean": "EmbeddedServletContainerAutoConfiguration",
      },
      {
        "bean": "embeddedServletContainerCustomizerBeanPostProcessor",
      },
      {
        "bean": "DispatcherServletAutoConfiguration$DispatcherServletConfiguration",
      },
      {
        "bean": "dispatcherServlet",
      },
      {
        "bean": "dispatcherServletRegistration",
      },
      {
        "bean": "DispatcherServletAutoConfiguration",
      },
      {
        "bean": "ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration",
      },
      {
        "bean": "error",
      },
      {
        "bean": "beanNameViewResolver",
      },
      {
        "bean": "ErrorMvcAutoConfiguration",
      },
      {
        "bean": "errorAttributes",
      },
      {
        "bean": "basicErrorController",
      },
      {
        "bean": "WebMvcAutoConfiguration$EnableWebMvcConfiguration",
      },
      {
        "bean": "requestMappingHandlerAdapter",
      },
      {
        "bean": "requestMappingHandlerMapping",
      },
      {
        "bean": "mvcContentNegotiationManager",
      },
      {
        "bean": "viewControllerHandlerMapping",
      },
      {
        "bean": "beanNameHandlerMapping",
      },
      {
        "bean": "resourceHandlerMapping",
      },
      {
        "bean": "mvcResourceUrlProvider",
      },
      {
        "bean": "defaultServletHandlerMapping",
      },
      {
        "bean": "mvcConversionService",
      },
      {
        "bean": "mvcValidator",
      },
      {
        "bean": "mvcPathMatcher",
      },
      {
        "bean": "mvcUrlPathHelper",
      },
      {
        "bean": "mvcUriComponentsContributor",
      },
      {
        "bean": "httpRequestHandlerAdapter",
      },
      {
        "bean": "simpleControllerHandlerAdapter",
      },
      {
        "bean": "handlerExceptionResolver",
      },
      {
        "bean": "mvcViewResolver",
      },
      {
        "bean": "WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration",
      },
      {
        "bean": "faviconHandlerMapping",
      },
      {
        "bean": "faviconRequestHandler",
      },
      {
        "bean": "WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter",
      },
      {
        "bean": "defaultViewResolver",
      },
      {
        "bean": "requestContextListener",
      },
      {
        "bean": "viewResolver",
      },
      {
        "bean": "spring.mvc.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "spring.resources.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "ConfigurationPropertiesBindingPostProcessor",
      },
      {
        "bean": "ConfigurationPropertiesBindingPostProcessor.store",
      },
      {
        "bean": "WebMvcAutoConfiguration",
      },
      {
        "bean": "hiddenHttpMethodFilter",
      },
      {
        "bean": "AuditAutoConfiguration$AuditEventRepositoryConfiguration",
      },
      {
        "bean": "auditEventRepository",
      },
      {
        "bean": "AuditAutoConfiguration",
      },
      {
        "bean": "auditListener",
      },
      {
        "bean": "MetricRepositoryAutoConfiguration$MetricRepositoryConfiguration",
      },
      {
        "bean": "metricRepository",
      },
      {
        "bean": "MetricRepositoryAutoConfiguration",
      },
      {
        "bean": "counterService",
      },
      {
        "bean": "gaugeService",
      },
      {
        "bean": "PublicMetricsAutoConfiguration$TomcatMetricsConfiguration",
      },
      {
        "bean": "tomcatPublicMetrics",
      },
      {
        "bean": "PublicMetricsAutoConfiguration",
      },
      {
        "bean": "systemPublicMetrics",
      },
      {
        "bean": "metricReaderPublicMetrics",
      },
      {
        "bean": "MongoAutoConfiguration",
      },
      {
        "bean": "mongo",
      },
      {
        "bean": "spring.data.mongodb.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "MongoDataAutoConfiguration",
      },
      {
        "bean": "mongoDbFactory",
      },
      {
        "bean": "mongoTemplate",
      },
      {
        "bean": "mappingMongoConverter",
      },
      {
        "bean": "mongoMappingContext",
      },
      {
        "bean": "gridFsTemplate",
      },
      {
        "bean": "HealthIndicatorAutoConfiguration$DiskSpaceHealthIndicatorConfiguration",
      },
      {
        "bean": "diskSpaceHealthIndicator",
      },
      {
        "bean": "diskSpaceHealthIndicatorProperties",
      },
      {
        "bean": "HealthIndicatorAutoConfiguration$MongoHealthIndicatorConfiguration",
      },
      {
        "bean": "mongoHealthIndicator",
      },
      {
        "bean": "HealthIndicatorAutoConfiguration",
      },
      {
        "bean": "healthAggregator",
      },
      {
        "bean": "management.health.status.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "EndpointAutoConfiguration$InfoPropertiesConfiguration",
      },
      {
        "bean": "EndpointAutoConfiguration$RequestMappingEndpointConfiguration",
      },
      {
        "bean": "requestMappingEndpoint",
      },
      {
        "bean": "EndpointAutoConfiguration",
      },
      {
        "bean": "environmentEndpoint",
      },
      {
        "bean": "healthEndpoint",
      },
      {
        "bean": "beansEndpoint",
      },
      {
        "bean": "infoEndpoint",
      },
      {
        "bean": "metricsEndpoint",
      },
      {
        "bean": "traceEndpoint",
      },
      {
        "bean": "dumpEndpoint",
      },
      {
        "bean": "autoConfigurationAuditEndpoint",
      },
      {
        "bean": "shutdownEndpoint",
      },
      {
        "bean": "configurationPropertiesReportEndpoint",
      },
      {
        "bean": "MBeanExportConfiguration",
      },
      {
        "bean": "JmxAutoConfiguration$Empty",
      },
      {
        "bean": "JmxAutoConfiguration",
      },
      {
        "bean": "objectNamingStrategy",
      },
      {
        "bean": "mbeanServer",
      },
      {
        "bean": "EndpointMBeanExportAutoConfiguration",
      },
      {
        "bean": "endpointMBeanExporter",
      },
      {
        "bean": "endpoints.jmx.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "ServerPropertiesAutoConfiguration",
      },
      {
        "bean": "serverProperties",
      },
      {
        "bean": "ManagementServerPropertiesAutoConfiguration",
      },
      {
        "bean": "managementServerProperties",
      },
      {
        "bean": "EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration",
      },
      {
        "bean": "applicationContextIdFilter",
      },
      {
        "bean": "EndpointWebMvcAutoConfiguration",
      },
      {
        "bean": "endpointHandlerMapping",
      },
      {
        "bean": "mvcEndpoints",
      },
      {
        "bean": "environmentMvcEndpoint",
      },
      {
        "bean": "healthMvcEndpoint",
      },
      {
        "bean": "metricsMvcEndpoint",
      },
      {
        "bean": "shutdownMvcEndpoint",
      },
      {
        "bean": "endpoints.health.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "MetricFilterAutoConfiguration",
      },
      {
        "bean": "metricFilter",
      },
      {
        "bean": "TraceRepositoryAutoConfiguration",
      },
      {
        "bean": "traceRepository",
      },
      {
        "bean": "TraceWebFilterAutoConfiguration",
      },
      {
        "bean": "webRequestLoggingFilter",
      },
      {
        "bean": "PersistenceExceptionTranslationAutoConfiguration",
      },
      {
        "bean": "persistenceExceptionTranslationPostProcessor",
      },
      {
        "bean": "MongoRepositoriesAutoConfiguration",
      },
      {
        "bean": "RepositoryInterfaceAwareBeanPostProcessor#0",
      },
      {
        "bean": "JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration",
      },
      {
        "bean": "jacksonObjectMapperBuilder",
      },
      {
        "bean": "http.mappers.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "spring.jackson.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "JacksonAutoConfiguration$JacksonObjectMapperConfiguration",
      },
      {
        "bean": "jacksonObjectMapper",
      },
      {
        "bean": "JacksonAutoConfiguration",
      },
      {
        "bean": "HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration",
      },
      {
        "bean": "stringHttpMessageConverter",
      },
      {
        "bean": "spring.http.encoding.CONFIGURATION_PROPERTIES",
      },
      {
        "bean": "HttpMessageConvertersAutoConfiguration$MappingJackson2HttpMessageConverterConfiguration",
      },
      {
        "bean": "mappingJackson2HttpMessageConverter",
      },
      {
        "bean": "HttpMessageConvertersAutoConfiguration",
      },
      {
        "bean": "messageConverters",
      },
      {
        "bean": "SpringDataWebConfiguration",
      },
      {
        "bean": "pageableResolver",
      },
      {
        "bean": "sortResolver",
      },
      {
        "bean": "SpringDataJacksonConfiguration",
      },
      {
        "bean": "jacksonGeoModule",
      },
      {
        "bean": "SpringDataWebAutoConfiguration",
      },
      {
        "bean": "HttpEncodingAutoConfiguration",
      },
      {
        "bean": "characterEncodingFilter",
      },
      {
        "bean": "MultipartAutoConfiguration",
      },
      {
        "bean": "multipartConfigElement",
      },
      {
        "bean": "multipartResolver",
      },
      {
        "bean": "multipart.CONFIGURATION_PROPERTIES",
      }
    ]
  }
]
~~~~~~~~ 

As you can see, a few lines of Gradle code install numerous beans into our application.  Some of the interesting beans include:

* an embedded servlet container enabling you to run your application as an executable JAR/WAR
* fully configured MongoDB setup, including GridFS
* various operational endpoints, including health monitoring and the ability to shutdown the application via a REST call

Another feature that Spring Boot gives you is a nice hierarchical, type-safe configuration mechanism.  Your beans can have a configuration object
injected into them that contains the application's deployed state.  This configuration is backed by a hierarchy of either property files or YML files.
If you couple the configuration mechanism with Spring Profiles and you have a very powerful mechanism for tuning your application's deployments.

{title="Relevant Configuration Files"} 
~~~~~~~~ 
service/
├── build.gradle
└── src
    ├── main
    │   ├── groovy
    │   │   └── org
    │   │       └── example
    │   │           ├── Application.groovy
    │   │           ├── ApplicationProperties.groovy
    │   ├── resources
    │   │   ├── config
    │   │   │   ├── application-production.properties
    │   │   │   ├── application.properties
    │   │   │   └── application-test.properties
~~~~~~~~ 

{title="ApplicationProperties.groovy"} 
~~~~~~~~ 
/**
 * Application specific properties.  This can be injected into beans to share values.
 */
@ConfigurationProperties( value = 'example', ignoreUnknownFields = false )
class ApplicationProperties {
    /**
     * The name of the AMQP queue where messages go to.
     */
    String queue = 'echo-queue'
}
~~~~~~~~ 

{title="application.properties"} 
~~~~~~~~ 
example.queue = development-queue
~~~~~~~~ 

{title="application-test.properties"} 
~~~~~~~~ 
example.queue = qa-queue
~~~~~~~~ 

{title="application-production.properties"} 
~~~~~~~~ 
example.queue = production-queue
~~~~~~~~ 

In the above example, the value of the `queue` value will change depending on which Spring profile is currently active.  The Spring Boot documentation
has some nice examples and I encourage you to look there for a deeper discussion.
