## As a Developer I want to be able to easily create automated tests

> *Dear JVM Guy, I'm trying to cultivate a test-first mindset but I'm having 
> difficulties getting into a rhythm.  I think it is because I'm struggling 
> with my tools.  I'm using JUnit, which isn't hard to grasp, but I am having 
> issues with dealing with inter-object collaborations.  All the text books 
> say I should be mocking and stubbing so I've tried a couple libraries 
> including EasyMock and Mockito, but found the syntax for setup and replay 
> to be cumbersome.  Do you have any suggestions on libraries
> that might make my struggle a bit easier?*
>
> Testing in Tokyo

**The JVM Guy Recommends: [Spock](https://code.google.com/p/spock/)**

Dear Testing, I feel your pain.  I too have struggled with writing automated 
tests.  Some tests were super simple to write and others were more complex 
than the object I was testing!  My breakthrough came when I realized it
was ok to be a polyglot programmer.  At the time I was working on a Java 
project and *assumed* that I had to use Java in my tests as well. Once I
decided that it was okay to look to other JVM languages for my testing needs,
my world opened up.  I looked at JRuby and others but eventually settled on 
Groovy, mainly because of its small learning curve for Java developers.  In the
Groovy space I found an excellent testing tool named Spock and can't recommend 
it enough.  It has allowed the teams I've worked on to breeze through most 
testing tasks. In fact, we cringe when we have to revisit tests written in
Java.  My only complaint about Spock is that its documentation could use some
work but Mr. Haki has filled that void with his 
book [Spocklinght Notebook](https://leanpub.com/spockframeworknotebook).
The book describes everything you need to know so I'll just restrict this
discussion to an example or two of my favorite recipes.

### Data Driven Testing

Sometimes you need to test an algorithm using different data sets.  The 
naive way to accomplish this would be to create multiple tests that differ 
only in the data.  Spock, of course, has a more elegant solution to the
problem.

{title="Data Driven Test", lang=groovy}
~~~~~~~
@Unroll( 'verify addition where #description' )
def 'verify addition scenarios'() {

    given: 'valid subject under test'
    def sut = new Adder()

    when: 'two numbers are added'
    def result = sut.add( x, y )

    then: 'expected results are returned'
    result == expected

    where: 
     x  | y || expected
     0  | 0 || 0
     1  | 0 || 1
    -1  | 1 || 0

    description = "x is ${x} and ${y}" )
}
~~~~~~~

One thing to notice that I'm using the given/when/then format in test but Spock allows
you to use other forms as well.  Spock will loop through the data in the `where` clause
and run an instance of the test replacing the variables with the data in the table.
For example, the first run will have `x` replaced with 0, `y` with 0 and `expected` with 0.
The `description` variable is also replaced with evaluated GString and printed in the
`@Unroll` statement.  Enriching the `@Unroll` annotation makes it easier to see exactly why data
is being used when a test case fails.

{title="Mocking A Network Failure", lang=groovy}
~~~~~~~
def 'verify exception is wrapped'() {

    def uri = generateRandomURI()

    given: 'valid subject under test'
    def sut = new SomeIntegrationPoint()

    and: 'trained test double'
    def restTemplate = Stub( RestOperation )
    sut.restTemplate = restTemplate
    restTemplate.headForHeaders( uri ) >> throw new IOException( 'Forced to fail' )

    when: 'the connection fails'
    sut.fetchResourceHeaders( uri )

    then: 'a domain exception is returned'
    def thrown = thrown( IntegrationFailure )
    thrown.statusCode == 0xDEAD     
}
~~~~~~~

In this test, we are using a test double to replace the actual REST template we would normally use.  In this
case the test dboule has been instructed to thrown an IOException when `headForHeaders` is called with a 
particular value.  The check uses the `thrown` clause to verify that an execption of type `IntegrationFailure` 
was thrown.  We also verify that the correct status code was filled in.