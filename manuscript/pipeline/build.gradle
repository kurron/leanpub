buildscript {
    ext {
        groovyVersion = '2.3.3'
        hamcrestVersion = '1.3'
        httpClientVersion = '4.3.3'
        jdependVersion = '2.9.1'
        junitVersion = '4.11'
        logbackVersion = '1.1.1'
        servletApiVersion = '3.0.1'
        slf4jVersion = '1.7.7'
        spockVersion = '0.7-groovy-2.0'
        springBootVersion = '1.0.2.RELEASE'
        springFrameworkVersion = '4.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

configurations.all {
    exclude group: 'commons-logging'
}

if ( 'one' == stage ) {
    logger.quiet 'Stage One'

    apply plugin: 'groovy'
    apply plugin: 'war'
    apply plugin: 'codenarc'
//    apply plugin: 'jdepend'
//    apply plugin: 'pmd'
    apply plugin: 'project-report'
//    apply plugin: 'jacoco'
    apply plugin: 'spring-boot'

    description = 'Sample REST service'
    group = 'org.kurron'
    version = '0.0.1'

    logger.quiet 'Configuring compiler options'
    compileJava.options*.compilerArgs = ['-Xlint:deprecation', '-encoding', 'UTF-8']
    compileTestJava.options*.compilerArgs = ['-Xlint:deprecation', '-encoding', 'UTF-8']
    compileGroovy.groovyOptions.optimizationOptions['indy'] = true
    compileTestGroovy.groovyOptions.optimizationOptions['indy'] = true

    logger.quiet 'Configuring unit testing options'
    test {
        scanForTestClasses = false
        includes = ['**/*UnitTest.class']
        excludes = ['**/AbstractUnitTest.class']
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

    logger.quiet 'Configuring secondary artifacts'
    ext.sharedManifest = manifest {
        attributes( "Implementation-Title": project.name, "Implementation-Version": project.version )
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        exclude('**/*.properties')
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task testSourcesJar(type: Jar, dependsOn: testClasses) {
        classifier = 'test-sources'
        from sourceSets.test.allSource
        exclude('**/*.properties')
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task testBinariesJar(type: Jar, dependsOn: testClasses) {
        classifier = 'test'
        from sourceSets.test.output
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from project.docsDir.path + '/javadoc'
        manifest = project.manifest {
            from sharedManifest
        }
    }

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'groovydoc'
        from project.docsDir.path + '/groovydoc'
        manifest = project.manifest {
            from sharedManifest
        }
    }

    artifacts {
        archives sourcesJar
        archives testSourcesJar
        archives testBinariesJar
        archives javadocJar
        archives groovydocJar
    }

    configurations {
        providedRuntime
    }

    logger.quiet 'Configuring CodeNarc options'
    codenarc {
        configFile = file( "${projectDir}/src/main/config/codenarc/codenarc.xml" )
        toolVersion = '0.21'
        ignoreFailures = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.codehaus.groovy:groovy:${groovyVersion}:indy"
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

        testCompile "junit:junit:${junitVersion}"
        testCompile "org.springframework:spring-test:${springFrameworkVersion}"
        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testCompile( "org.spockframework:spock-core:${spockVersion}" ) { exclude module: 'groovy-all' }
        testCompile( "org.spockframework:spock-spring:${spockVersion}" ) { exclude module: 'groovy-all' }
        testCompile "jdepend:jdepend:${jdependVersion}"
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '1.12'
    }

    defaultTasks 'clean', 'projectReport', 'build'
}
else {
    logger.quiet 'Stage Two'
}
