# Development Environment
Setting up a development environment can be a painful task.  You have get your operating system just right.
You have to ensure the correct versions of all your tools are installed.  You have to make sure the databases
and messaging brokers are properly configured and networked.  I'll show you a way to take away most of the pain and
make setting up an environment a non-event.

The key is **virtualization**.  Modern hardware has enough computing power to run multiple operating systems and
that is exactly what virtualization is: running multiple operating system simultaneously on a single piece of hardware.
Using virtualization, we easily create an operating environment that is close to what will be run in production.
Need 3 instances of MongoDB?  No problem.  Need HAProxy routing traffic to Redis, Tomcat and RabbitMQ?  Simple.
All you need is a relatively modern laptop and 8 GB of RAM.  Obviously, more RAM is better but 8 should do for
most use cases.

## Ubuntu Linux
The operating system that many of my applications are deployed on run on Linux.  Typically, Ubuntu Linux.  There
are numerous advantages of using Linux but I'll call attention to three: cost, remote access and efficient
use of resources.  You can run Ubuntu without having to pay for license fees which is perfect virtualized environments.
You can spin up as many virtual machines as you want and not have to worry about violating some license agreement.

The ability to access a Linux box over slow WAN connections via SSH is extremely useful.  No need fire up a remote
 desktop just to deploy a new version of the application.  Often times, deployments can be scripted and run as part
 of an automated deployment system.  Very useful.

Finally, the fact that you can run Linux headless that is, without a graphical user interface, far fewer resources
 are required to run an instance of Linux.  Considering that our goal is to run multiple virtual machines on our
 laptop, keeping the footprint of the machine small is desirable.

I> I want you to know that using Microsoft Windows as a virtualized operating system is absolutely possible but
I> harder to implement than Linux.  The tools I'll be discussing work wonderfully with Linux but sometimes have
I> a hard time with Windows.  You'll have to look elsewhere if you want advice on virtualizing Microsoft Windows.

## VirtualBox
VirtualBox is what is known as a hypervisor and its job is to allow you to run multiple operating systems at once.
You can think of it as a piece of software that acts as a mini computer running on your laptop. As far as Linux
is concerned it is installed on an Intel box and has complete control over the RAM, hard drive, network and video
card.  In reality, VirtualBox is giving Linux control over a **fraction** of the available hardware.  Consider it
a hardware sandbox where you can easily create and destroy computers at will.

## Packer and Vagrant
Packer and Vagrant are two invaluable tools that work together, along with VirtualBox, to provide an automated
mechanism for creating and managing virtual machines.  Packer, the first step in the tool chain, makes it easy
to create a virtualized Linux machine that can be feed into Vagrant.  Vagrant will take this machine and create
the multiple VMs required for your development environment.  Once you experience the combination of Packer,
Vagrant and VirtualBox you will never go back to the old way of managing your environments.

## Installation
There isn't much to say other than to go to the websites, grab the installers and run them.  The installation process
is simple and nearly bullet proof.

T> ### CPU Virtualization Support
T> Double check that your CPU supports virtualization and that it is enabled in the BIOS.  The VirtualBox installer
T> should warn you if you don't but you should probably verify things before starting the installation process.

W> ### Software Versions
W> Typically, you'll want to be running the latest versions of VirtualBox, Packer and Vagrant.  Once in a great
W> while an update to VirtualBox will break Vagrant.  Rolling back VirtualBox has always fixed the problem.
W> On the teams I've worked on, we usually trade-off the role of 'canary' when a new version of the stack comes
W> out.  That way, if something does break, only one of us loses some time on the issue.

## A Working Example
The best way to explain how all the pieces work together is to create a fictional project to work on.  Let's give
it a code name of project Neon.  Neon will be a publicly accessible REST API that will interact with services that
 use MongoDB, Redis and MySQL databases.  We also want Neon to be constantly available and resistant to failure so
 we'll run multiple instances behind an SSL terminator and load balancer, HAProxy. Finally, we want the services
that Neon collaborates with to loosely coupled from Neon so we'll use RabbitMQ to interact with them.  Lastly,
we'll need a development environment with an IDE, Gradle and Groovy installed.  Sounds like a full day of work
doesn't it?  I assure you we can build this environment in minutes, not hours.  Let's get started.

## Step One: Building The Base Box
Vagrant works with something called a base box, or box for short.  It is a pre-built vanilla virtual machine
that Vagrant will import and transform into a specialized box tailored to your specifications.  How do we
make that box?  That is where Packer comes in.

Packer is an interesting tool best summed up by the banner at the Packer website:

> Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.

Packer can generate images for Amazon ECS (AMI), DigitalOcean, Docker, Google Compute Engine, OpenStack, Parallels, QEMU, VirtualBox
and VMWare. For now, we'll focus only on VirtualBox.

The process is very simple to understand and execute.  You'll find most of your time is spent thinking about what you want
in your image and how to describe it to Packer.

Packer reads a JSON file that contains the description of what you want built.  The file can be named anything but since we'll
be building an Ubuntu Linux 14.04 Server, we'll name the file `trusty-x64-server.json`.

<<[trusty-x64-server.json](neon/trusty-x64-server.json)

If you scan the file, you'll notice that most things are fairly obvious.  The interesting stuff happens in the
builders and provisioners blocks.  Let's start with the builders block.

{crop-start-line=12,crop-end-line=16}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

In this section, we are describing where on the network to grab the Ubuntu installer.  Simple. The next section is
the odd one.

{crop-start-line=18,crop-end-line=28}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

If you have ever install Linux, you will know that it asks you questions as it guides you through the installation
process.  Obviously, we're shooting for an unmanned, automated installation process so we can't have the installer
ask any questions.  Luckily, the Linux folks have come up with a mechanism to facilitate automated installations:
the `preseed.cfg` file.  Most of the block is telling Packer what keystrokes to send to the installer just so
it can tell the installer "Run with the preseed file, please."  I'm not going to lie, the preseed file is fairly large
and strange to read but there are plenty of comments to guide you through choices.  I left the preseed file mostly
stock but I did make a few minor adjustments.

Here I decided to use the NTP server for North America to help keep time on the box.

{crop-start-line=22,crop-end-line=25}
<<[preseed.cfg](neon/trusty-x64-server/preseed.cfg)

I also modified the default user to match up with what I wanted Vagrant to use.

{crop-start-line=55,crop-end-line=61}
<<[preseed.cfg](neon/trusty-x64-server/preseed.cfg)

Finally, I had the installer install some extra packages.  The `build-essential` package is necessary for
Vagrant to install its Guest Additions, which we'll talk about later.

{crop-start-line=66,crop-end-line=67}
<<[preseed.cfg](neon/trusty-x64-server/preseed.cfg)

That's it for the interesting pieces of the builders block.  Onto the provisioners block.

The provisioners block allows you to install additional software to the box and Packer supports a multitude of ways to provision.
Choices include Shell Scripts, File Uploads, Ansible, Chef Client, Chef Solo, Puppet Masterless, Puppet Server and Salt.
Of that list, shell scripts are the simplest get started with and is what I used in my Packer file.

{crop-start-line=56,crop-end-line=76}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

Let's break things down a bit.  Vagrant requires that the primary account can run passwordless sudo so we set that up.

{crop-start-line=61,crop-end-line=61}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

Next, we have to do some minor touches on the Docker installation that took place as part of the preseed file.

{crop-start-line=62,crop-end-line=63}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

Vagrant uses SSH to talk to the box so you need to set up passwordless SSH access via keys.  Here I'm using the insecure,
well-known Vagrant key but I could have installed my own key just a easily.

{crop-start-line=64,crop-end-line=68}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

The final set of commands is to install VirtualBox's Guest Additions, which provide shared folders and video drivers.

{crop-start-line=69,crop-end-line=74}
<<[trusty-x64-server.json](neon/trusty-x64-server.json)

## Building The Box
Once you have your Packer descriptor and your preseed file in place, all that is left is to run Packer and have it
assemble your box.

* `packer validate trusty-x64-server.json` to ensure the descriptor is valid
* `packer build trusty-x64-server.json` to create the Vagrant box

After several moments, you should have your self a Vagrant box ready for customization.

We're now quite ready to try out our new box just yet.  We still need to set up the Vagrant file.  What we can do,
however, is import the box into Vagrant.  Type `vagrant box add packer/trusty-x64-server trusty-x64-server.box` to
add the new box under the name of `packer/trusty-x64-server`.  Before we leave our discussion on Packer, we need
to do one more thing: make a box with a GUI.

If you visit the Vagrant website they'll talk about how you can share files between your laptop and the VMs, allowing
you to use your IDE to edit files, creating artifacts and deploying them the VMs.  I prefer to virtualize my IDE as well.
There are several advantages to doing this but my favorite one is that I can leave my laptop free of clutter.  My laptop,
which is usually a Windows box, can remain relatively stable with just Microsoft Office and VPN software installed.  A
virtualized IDE also allows me to have the correct tool set for a particular project ready to go.  I've used this
technique to quickly allow me to fire up an environment a year after active development stopped to fix a bug.  Very
handy.  How do we make a virtualized IDE?   Using Linux makes it simple.  All we do is to take the same server box
we just created and install additional packages to add a GUI to it.  Linux is quite flexible in this regard.  You
can install a GUI that is heavy on the eye candy, one that is spartan or one that is in between.  Myself, I prefer
the Xubuntu desktop which works wonderfully in a virtualized setting.

To create our IDE box, all we need is a Packer file with some additional packages added to it.  If you look at
the Packer file you'll notice the only real difference is the amount of RAM and CPU I give the box as well as
the preseed file I point it to.

<<[trusty-x64-desktop.json](neon/trusty-x64-desktop.json)

The big change in the preseed file is that I install the `xubuntu-desktop` package will provides the GUI.

<<[preseed.cfg](neon/trusty-x64-desktop/preseed.cfg)

Q> You might be asking yourself "If all I need to get a GUI box is to add an additional package, why don't I just
Q> use the server box and have Vagrant add it?"  The answer is: time.  Although this is possible, you will find
Q> that it takes a bit of time to download and install all software needed to provide a GUI.  Baking it into the
Q> image saves time downstream in the process.

Just like the server, all we need to create the GUI box is to issue a few simple commands.

* `packer validate trusty-x64-desktop.json`
* `packer build trusty-x64-desktop.json`

Once the box is build, import it into Vagrant via `vagrant box add packer/trusty-x64-desktop trusty-x64-desktop.box`.
At this point we are ready to proceed to the next tool: Vagrant.

##Vagrant

From the Vagrant web site:

> Development environments made easy. Create and configure lightweight, reproducible, and portable development environments.

Similar to Packer. Vagrant requires a descriptor that details how you want the boxes build.  Unlike Packer, however,
Vagrant uses Ruby as it description language.