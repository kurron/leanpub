# As a Developer...

## As a Developer I need to quickly create development environments for the multiple projects I work on.

> *Dear JVM Guy, at my company people wear many hats and work on a variety of projects.  I find myself constantly struggling to recreate a working
> development environment for the project I'm switching over to.  Its a nightmare to get the right JDK installed with the right versions of
> MySQL and Python.  Please help!*
>
> *Constantly Switching in Cairo*

**The JVM Guy Recommends: VirtualBox, Linux, Packer, Vagrant, Ansible**

Dear Constantly Switching, I feel your pain and I think the solution is well within your reach. All you need to do is stop using your real
box for development and switch to a virtualized one.  The free hypervisor VirtualBox is an excellent tool that I have been successfully 
using for many years.  Using virtualization you can quickly switch between project setups without having to adjust your real machine.  Howevever,
before you can switch to a virtualized environment you'll have to pick up a few technologies. 

A> Do I have to ditch Windows for Linux?  In a word -- yes.  Its not that Windows is bad, its just that tooling works so much better
A> with Linux than Windows.  In addition, it has been my experience that many of the applications are deployed to virtualized Linux 
A> environments so why not develop the skills to work with those servers by experiencing Linux as you develop?

VirtualBox allows you to run almost any operating system you want but somebody still has to install the OS and applications.  That is where 
Vagrant comes in.  Vagrant understands VirtualBox's command-line and orchestrates the installation of the OS and applications.  It does so
by loading what Vagrant calls a base box. A base box is an image of a pre-configured OS usually pulled down from Vagrant's registry in
the cloud.  I prefer to create my own base box configured just the way I want.  Luckily, that process can be automated as well using
Packer.  Tweaking the base box for particular environments, such as installing IntelliJ or a JDK is also automated using the Ansible
provisioner.  Let's put it all together.

A> Do I have to use VirtualBox? Absolutely not.  You can use any hypervisor you have access to, such as VMWare, but you probably want to 
A> check the Vagrant documentation and verify that your hypervisor is supported.  The same can be said for Ansible.  If you are more
A> comfortable with Salt, Puppet or Chef then use one of those tools.  The tool chain isn't what is important -- the use of virtualization
A> is.

To recap, the goal is to create a tuned development environment using as much automation as possible.  The first step is to create 
a base box that we'll use for our environments.  The base box I like to use is built upon Xubuntu 14.04 (Ubuntu Linux using the Xfce 
window manager), using Ansible as the provisioner.

The Packer documentation does a good job explaining how to set things up so I'll concentrate on the major pieces. First up is the Packer
template file.  It is a JSON file that tells Packer where to grab the OS image to boot up and what provisioners to run against the 
running machine.

{title="Packer Template File: trusty-x64-desktop.json", lang="JavaScript"} 
<<(packer/trusty-x64-desktop.json)

The Packer documentation is well written so I won't go into great detail here about the file format but I will highlight some items that took some
research to figure out how to do.  First off is how to actually get Ubuntu installed in automated fashion?  Typically, the Ubuntu installation process
is interactive with a human at the keyboard answering various questions. Obviously, if you want Packer to automate the process you can require human 
interaction.  Fortunately, Ubuntu supports the notion of a `preseed` file which contains all the answers to the installer's questions.  All you have to
do is to get Packer to tell the installer to use the preseed file.  That is what all of that odd looking text in the `boot_command` section is.  That text
is what a human would have to type in order to get the installer to run an automated installation.

Another interesting section of the Packer template file is the `provisioners` section.  Here we are running a few shell scripts using the `sudo` command
to make the box Vagrant friendly.  The contents of the scripts are uninteresting and can be viewed on the website so look there if you are curious about
the details.  Now, you'll notice a second block in the `provisioners` section and that block launches the Ansible provisioning tool.  In a nutshell, Ansible
allows you to script your provisioning commands and execute them over SSH.  Very easy to set up and extremely useful.  You might have noticed in the prior block
that we are a script to install Ansible into the base box itself.  Normally, you run Ansible on a single machine on the network and have it SSH out to any boxes
that need provisioning.  Since we are using Vagrant, we want everything to be self-contained which means Ansible will always be talking to itself.

{title="Ansible Installation Script: install-ansible.sh", lang="Bash"} 
<<(packer/ansible/scripts/install-ansible.sh)

You dictate to Ansible what the desired state of the machine should be and let Ansible figure out how to make that happen.  The desired state is described in
what is known as a `playbook` file which is a YAML file that references the numerous Ansible modules that are available out of the box.  Custom logic can be
encapsulated in simple shell scripts or, if you want to share your logic with others, in a custom Ansible module.  One thing to note is that any custom logic
you write should be created in such a way as to make the steps idempotent.  The baked-in Ansible modules are idempotent and won't do anything if the desired
state is already in place.  Your logic should follow the same pattern.  I didn't do this my first time out and I had 50 entries in an `/etc/hosts` file for the
same machine!

{title="Ansible Playbook (desktop): ansible-desktop.yml", lang="YAML"} 
<<(packer/ansible/ansible-desktop.yml)


## As a Developer I want to be able to quickly create a skeleton for my new micro-service project

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: lazybones**

## As a Developer I want to quickly bootstrap my new micro-service project

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Solution: Spring Boot**

## As a Developer I want to be able to easily create unit tests

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Spock**

## As a Developer I want to be able to easily create components tests

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Spock, Spring Test**

## As a Developer I want to my code automatically inspected for style violations and bad practices

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: CodeNarc**

## As a Developer I want to automatically detect missing unit tests for new code

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: JaCoCo**

## As a Developer I want to run component test against fake services

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: betamax, Spring Profiles**

## As a Developer I want to add features to the main branch without breaking the system

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: feature toggles, branch by abstraction, Spring Profiles**

## As a Developer I want to document my micro-service's REST APIs

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Swagger**

## As a Developer I want to document my micro-service's relational database schema

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: SchemaSpy**

## As a Developer I want to document my micro-service's class relationships

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: UMLGraph (check Neal's talk)**

## As a Developer I want to keep my logic adaptive to change

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Spring Integration**

## As a Developer I want my code changes automatically built

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Jenkins, Bamboo**

## As a Developer I want my artifacts automatically made available

> *Dear JVM Guy, ...*
>
> Sleepless in Seattle

**The JVM Guy Recommends: Artifactory, bintray**
